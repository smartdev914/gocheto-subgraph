// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FeeUpdated extends ethereum.Event {
  get params(): FeeUpdated__Params {
    return new FeeUpdated__Params(this);
  }
}

export class FeeUpdated__Params {
  _event: FeeUpdated;

  constructor(event: FeeUpdated) {
    this._event = event;
  }

  get which(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _totalFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _alpha(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _beta(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PairCreated extends ethereum.Event {
  get params(): PairCreated__Params {
    return new PairCreated__Params(this);
  }
}

export class PairCreated__Params {
  _event: PairCreated;

  constructor(event: PairCreated) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pair(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get param3(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PairFeeUpdated extends ethereum.Event {
  get params(): PairFeeUpdated__Params {
    return new PairFeeUpdated__Params(this);
  }
}

export class PairFeeUpdated__Params {
  _event: PairFeeUpdated;

  constructor(event: PairFeeUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pair(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _totalFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _alpha(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _beta(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SetAddress extends ethereum.Event {
  get params(): SetAddress__Params {
    return new SetAddress__Params(this);
  }
}

export class SetAddress__Params {
  _event: SetAddress;

  constructor(event: SetAddress) {
    this._event = event;
  }

  get which(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newAddr(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TopCoinUpdated extends ethereum.Event {
  get params(): TopCoinUpdated__Params {
    return new TopCoinUpdated__Params(this);
  }
}

export class TopCoinUpdated__Params {
  _event: TopCoinUpdated;

  constructor(event: TopCoinUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get coinAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  allPairs(param0: BigInt): Address {
    let result = super.call("allPairs", "allPairs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_allPairs(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allPairs", "allPairs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allPairsLength(): BigInt {
    let result = super.call("allPairsLength", "allPairsLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allPairsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allPairsLength",
      "allPairsLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  alphaRegular(): BigInt {
    let result = super.call("alphaRegular", "alphaRegular():(uint256)", []);

    return result[0].toBigInt();
  }

  try_alphaRegular(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("alphaRegular", "alphaRegular():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  alphaTopCoin(): BigInt {
    let result = super.call("alphaTopCoin", "alphaTopCoin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_alphaTopCoin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("alphaTopCoin", "alphaTopCoin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  betaRegular(): BigInt {
    let result = super.call("betaRegular", "betaRegular():(uint256)", []);

    return result[0].toBigInt();
  }

  try_betaRegular(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("betaRegular", "betaRegular():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  betaTopCoin(): BigInt {
    let result = super.call("betaTopCoin", "betaTopCoin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_betaTopCoin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("betaTopCoin", "betaTopCoin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createPair(tokenA: Address, tokenB: Address): Address {
    let result = super.call(
      "createPair",
      "createPair(address,address):(address)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)],
    );

    return result[0].toAddress();
  }

  try_createPair(
    tokenA: Address,
    tokenB: Address,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPair",
      "createPair(address,address):(address)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeTo(): Address {
    let result = super.call("feeTo", "feeTo():(address)", []);

    return result[0].toAddress();
  }

  try_feeTo(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeTo", "feeTo():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeToSetter(): Address {
    let result = super.call("feeToSetter", "feeToSetter():(address)", []);

    return result[0].toAddress();
  }

  try_feeToSetter(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeToSetter", "feeToSetter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPair(param0: Address, param1: Address): Address {
    let result = super.call("getPair", "getPair(address,address):(address)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1),
    ]);

    return result[0].toAddress();
  }

  try_getPair(param0: Address, param1: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPair",
      "getPair(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  migrator(): Address {
    let result = super.call("migrator", "migrator():(address)", []);

    return result[0].toAddress();
  }

  try_migrator(): ethereum.CallResult<Address> {
    let result = super.tryCall("migrator", "migrator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pairCodeHash(): Bytes {
    let result = super.call("pairCodeHash", "pairCodeHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_pairCodeHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("pairCodeHash", "pairCodeHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  topCoins(param0: Address): boolean {
    let result = super.call("topCoins", "topCoins(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_topCoins(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("topCoins", "topCoins(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalFeeRegular(): BigInt {
    let result = super.call(
      "totalFeeRegular",
      "totalFeeRegular():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalFeeRegular(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeeRegular",
      "totalFeeRegular():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFeeTopCoin(): BigInt {
    let result = super.call(
      "totalFeeTopCoin",
      "totalFeeTopCoin():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalFeeTopCoin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeeTopCoin",
      "totalFeeTopCoin():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _feeToSetter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get coinAddress(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePairCall extends ethereum.Call {
  get inputs(): CreatePairCall__Inputs {
    return new CreatePairCall__Inputs(this);
  }

  get outputs(): CreatePairCall__Outputs {
    return new CreatePairCall__Outputs(this);
  }
}

export class CreatePairCall__Inputs {
  _call: CreatePairCall;

  constructor(call: CreatePairCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CreatePairCall__Outputs {
  _call: CreatePairCall;

  constructor(call: CreatePairCall) {
    this._call = call;
  }

  get pair(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetFeeToCall extends ethereum.Call {
  get inputs(): SetFeeToCall__Inputs {
    return new SetFeeToCall__Inputs(this);
  }

  get outputs(): SetFeeToCall__Outputs {
    return new SetFeeToCall__Outputs(this);
  }
}

export class SetFeeToCall__Inputs {
  _call: SetFeeToCall;

  constructor(call: SetFeeToCall) {
    this._call = call;
  }

  get _feeTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeToCall__Outputs {
  _call: SetFeeToCall;

  constructor(call: SetFeeToCall) {
    this._call = call;
  }
}

export class SetFeeToSetterCall extends ethereum.Call {
  get inputs(): SetFeeToSetterCall__Inputs {
    return new SetFeeToSetterCall__Inputs(this);
  }

  get outputs(): SetFeeToSetterCall__Outputs {
    return new SetFeeToSetterCall__Outputs(this);
  }
}

export class SetFeeToSetterCall__Inputs {
  _call: SetFeeToSetterCall;

  constructor(call: SetFeeToSetterCall) {
    this._call = call;
  }

  get _feeToSetter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeToSetterCall__Outputs {
  _call: SetFeeToSetterCall;

  constructor(call: SetFeeToSetterCall) {
    this._call = call;
  }
}

export class SetMigratorCall extends ethereum.Call {
  get inputs(): SetMigratorCall__Inputs {
    return new SetMigratorCall__Inputs(this);
  }

  get outputs(): SetMigratorCall__Outputs {
    return new SetMigratorCall__Outputs(this);
  }
}

export class SetMigratorCall__Inputs {
  _call: SetMigratorCall;

  constructor(call: SetMigratorCall) {
    this._call = call;
  }

  get _migrator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMigratorCall__Outputs {
  _call: SetMigratorCall;

  constructor(call: SetMigratorCall) {
    this._call = call;
  }
}

export class SetRegularCoinFeeCall extends ethereum.Call {
  get inputs(): SetRegularCoinFeeCall__Inputs {
    return new SetRegularCoinFeeCall__Inputs(this);
  }

  get outputs(): SetRegularCoinFeeCall__Outputs {
    return new SetRegularCoinFeeCall__Outputs(this);
  }
}

export class SetRegularCoinFeeCall__Inputs {
  _call: SetRegularCoinFeeCall;

  constructor(call: SetRegularCoinFeeCall) {
    this._call = call;
  }

  get _totalFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _alpha(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _beta(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetRegularCoinFeeCall__Outputs {
  _call: SetRegularCoinFeeCall;

  constructor(call: SetRegularCoinFeeCall) {
    this._call = call;
  }
}

export class SetTopCoinCall extends ethereum.Call {
  get inputs(): SetTopCoinCall__Inputs {
    return new SetTopCoinCall__Inputs(this);
  }

  get outputs(): SetTopCoinCall__Outputs {
    return new SetTopCoinCall__Outputs(this);
  }
}

export class SetTopCoinCall__Inputs {
  _call: SetTopCoinCall;

  constructor(call: SetTopCoinCall) {
    this._call = call;
  }

  get _coinAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetTopCoinCall__Outputs {
  _call: SetTopCoinCall;

  constructor(call: SetTopCoinCall) {
    this._call = call;
  }
}

export class SetTopCoinFeeCall extends ethereum.Call {
  get inputs(): SetTopCoinFeeCall__Inputs {
    return new SetTopCoinFeeCall__Inputs(this);
  }

  get outputs(): SetTopCoinFeeCall__Outputs {
    return new SetTopCoinFeeCall__Outputs(this);
  }
}

export class SetTopCoinFeeCall__Inputs {
  _call: SetTopCoinFeeCall;

  constructor(call: SetTopCoinFeeCall) {
    this._call = call;
  }

  get _totalFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _alpha(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _beta(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetTopCoinFeeCall__Outputs {
  _call: SetTopCoinFeeCall;

  constructor(call: SetTopCoinFeeCall) {
    this._call = call;
  }
}

export class UpdatePairFeeCall extends ethereum.Call {
  get inputs(): UpdatePairFeeCall__Inputs {
    return new UpdatePairFeeCall__Inputs(this);
  }

  get outputs(): UpdatePairFeeCall__Outputs {
    return new UpdatePairFeeCall__Outputs(this);
  }
}

export class UpdatePairFeeCall__Inputs {
  _call: UpdatePairFeeCall;

  constructor(call: UpdatePairFeeCall) {
    this._call = call;
  }

  get token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _totalFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _alpha(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _beta(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdatePairFeeCall__Outputs {
  _call: UpdatePairFeeCall;

  constructor(call: UpdatePairFeeCall) {
    this._call = call;
  }
}
